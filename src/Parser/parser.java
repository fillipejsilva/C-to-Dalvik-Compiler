
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 23 11:31:22 BRST 2012
//----------------------------------------------------

package org.parser;

import java_cup.runtime.*;
import org.tree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 23 11:31:22 BRST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\005\000\002\026" +
    "\006\000\002\003\002\000\002\003\004\000\002\004\012" +
    "\000\002\005\010\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\002\000\002" +
    "\007\004\000\002\010\002\000\002\010\005\000\002\011" +
    "\004\000\002\012\007\000\002\013\003\000\002\014\002" +
    "\000\002\014\004\000\002\015\006\000\002\016\002\000" +
    "\002\016\005\000\002\017\002\000\002\017\004\000\002" +
    "\020\007\000\002\020\011\000\002\020\011\000\002\020" +
    "\011\000\002\020\012\000\002\020\006\000\002\020\011" +
    "\000\002\020\007\000\002\020\004\000\002\021\004\000" +
    "\002\022\002\000\002\022\006\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\006\000\002\023\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\024\002\000\002\024\004" +
    "\000\002\025\002\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\014\005\001\002\000\004\002\217\001" +
    "\002\000\004\026\214\001\002\000\014\016\ufffe\017\ufffe" +
    "\020\ufffe\031\ufffe\035\ufffe\001\002\000\014\016\015\017" +
    "\017\020\014\031\013\035\016\001\002\000\014\016\ufffd" +
    "\017\ufffd\020\ufffd\031\ufffd\035\ufffd\001\002\000\004\002" +
    "\000\001\002\000\004\025\200\001\002\000\004\004\020" +
    "\001\002\000\004\025\ufff8\001\002\000\004\025\ufffa\001" +
    "\002\000\004\025\ufff7\001\002\000\004\025\ufff9\001\002" +
    "\000\004\005\021\001\002\000\004\006\022\001\002\000" +
    "\030\003\uffef\016\uffef\017\uffef\020\uffef\025\uffef\030\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\001\002\000" +
    "\030\003\uffea\016\015\017\017\020\014\025\uffea\030\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\016\036\uffea\001\002\000" +
    "\004\007\025\001\002\000\004\002\ufffb\001\002\000\004" +
    "\025\172\001\002\000\020\003\040\025\033\030\036\032" +
    "\032\033\034\034\041\036\031\001\002\000\030\003\uffee" +
    "\016\uffee\017\uffee\020\uffee\025\uffee\030\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\001\002\000\004\004\164" +
    "\001\002\000\004\004\154\001\002\000\010\004\140\010" +
    "\137\041\141\001\002\000\004\004\127\001\002\000\022" +
    "\003\uffe9\007\uffe9\025\uffe9\030\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\036\uffe9\001\002\000\004\004\114\001\002\000\016" +
    "\004\051\021\044\022\043\023\045\025\046\040\047\001" +
    "\002\000\004\015\042\001\002\000\016\004\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\025\ufff0\040\ufff0\001\002\000\022\003" +
    "\uffe0\007\uffe0\025\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\036\uffe0\001\002\000\042\005\uffcb\011\uffcb\012\uffcb\015" +
    "\uffcb\037\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\001" +
    "\002\000\042\005\uffcc\011\uffcc\012\uffcc\015\uffcc\037\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\001\002\000\042" +
    "\005\uffcd\011\uffcd\012\uffcd\015\uffcd\037\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\001\002\000\044\004\106\005" +
    "\uffcf\011\uffcf\012\uffcf\015\uffcf\037\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\001\002\000\016\004\051\021\044" +
    "\022\043\023\045\025\046\040\047\001\002\000\034\015" +
    "\104\037\065\042\067\043\057\044\062\045\063\046\053" +
    "\047\054\050\056\051\061\052\055\053\060\054\066\001" +
    "\002\000\016\004\051\021\044\022\043\023\045\025\046" +
    "\040\047\001\002\000\034\005\064\037\065\042\067\043" +
    "\057\044\062\045\063\046\053\047\054\050\056\051\061" +
    "\052\055\053\060\054\066\001\002\000\016\004\051\021" +
    "\044\022\043\023\045\025\046\040\047\001\002\000\016" +
    "\004\051\021\044\022\043\023\045\025\046\040\047\001" +
    "\002\000\016\004\051\021\044\022\043\023\045\025\046" +
    "\040\047\001\002\000\016\004\051\021\044\022\043\023" +
    "\045\025\046\040\047\001\002\000\016\004\051\021\044" +
    "\022\043\023\045\025\046\040\047\001\002\000\016\004" +
    "\051\021\044\022\043\023\045\025\046\040\047\001\002" +
    "\000\016\004\051\021\044\022\043\023\045\025\046\040" +
    "\047\001\002\000\016\004\051\021\044\022\043\023\045" +
    "\025\046\040\047\001\002\000\016\004\051\021\044\022" +
    "\043\023\045\025\046\040\047\001\002\000\042\005\uffce" +
    "\011\uffce\012\uffce\015\uffce\037\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\001\002\000\016\004\051\021\044\022" +
    "\043\023\045\025\046\040\047\001\002\000\016\004\051" +
    "\021\044\022\043\023\045\025\046\040\047\001\002\000" +
    "\016\004\051\021\044\022\043\023\045\025\046\040\047" +
    "\001\002\000\042\005\uffd2\011\uffd2\012\uffd2\015\uffd2\037" +
    "\uffd2\042\uffd2\043\uffd2\044\062\045\063\046\053\047\054" +
    "\050\056\051\061\052\055\053\060\054\066\001\002\000" +
    "\042\005\uffdb\011\uffdb\012\uffdb\015\uffdb\037\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\061\052\055\053\uffdb\054\uffdb\001\002\000\042\005\uffd1" +
    "\011\uffd1\012\uffd1\015\uffd1\037\uffd1\042\uffd1\043\uffd1\044" +
    "\062\045\063\046\053\047\054\050\056\051\061\052\055" +
    "\053\060\054\066\001\002\000\042\005\uffd6\011\uffd6\012" +
    "\uffd6\015\uffd6\037\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\061\052\055\053\060\054" +
    "\066\001\002\000\042\005\uffd7\011\uffd7\012\uffd7\015\uffd7" +
    "\037\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\061\052\055\053\060\054\066\001\002" +
    "\000\042\005\uffd9\011\uffd9\012\uffd9\015\uffd9\037\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\001\002\000\042\005" +
    "\uffda\011\uffda\012\uffda\015\uffda\037\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\061\052" +
    "\055\053\uffda\054\uffda\001\002\000\042\005\uffdc\011\uffdc" +
    "\012\uffdc\015\uffdc\037\065\042\067\043\057\044\062\045" +
    "\063\046\053\047\054\050\056\051\061\052\055\053\060" +
    "\054\066\001\002\000\042\005\uffd3\011\uffd3\012\uffd3\015" +
    "\uffd3\037\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\061\052\055\053\060\054\066\001" +
    "\002\000\042\005\uffd8\011\uffd8\012\uffd8\015\uffd8\037\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\001\002\000\042" +
    "\005\uffd4\011\uffd4\012\uffd4\015\uffd4\037\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\061" +
    "\052\055\053\060\054\066\001\002\000\042\005\uffd5\011" +
    "\uffd5\012\uffd5\015\uffd5\037\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\061\052\055\053" +
    "\060\054\066\001\002\000\004\007\ufff1\001\002\000\042" +
    "\005\uffca\011\uffca\012\uffca\015\uffca\037\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\001\002\000\020\004\uffc7\005" +
    "\uffc9\021\uffc7\022\uffc7\023\uffc7\025\uffc7\040\uffc7\001\002" +
    "\000\004\005\113\001\002\000\016\004\051\021\044\022" +
    "\043\023\045\025\046\040\047\001\002\000\036\005\uffc8" +
    "\012\112\037\065\042\067\043\057\044\062\045\063\046" +
    "\053\047\054\050\056\051\061\052\055\053\060\054\066" +
    "\001\002\000\016\004\uffc6\021\uffc6\022\uffc6\023\uffc6\025" +
    "\uffc6\040\uffc6\001\002\000\042\005\uffd0\011\uffd0\012\uffd0" +
    "\015\uffd0\037\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\001\002\000\016\004\051\021\044\022\043\023\045\025" +
    "\046\040\047\001\002\000\034\005\116\037\065\042\067" +
    "\043\057\044\062\045\063\046\053\047\054\050\056\051" +
    "\061\052\055\053\060\054\066\001\002\000\004\006\117" +
    "\001\002\000\020\003\uffea\007\uffea\025\uffea\030\uffea\032" +
    "\uffea\033\uffea\036\uffea\001\002\000\020\003\040\007\121" +
    "\025\033\030\036\032\032\033\034\036\031\001\002\000" +
    "\024\003\uffde\007\uffde\025\uffde\027\122\030\uffde\032\uffde" +
    "\033\uffde\034\uffde\036\uffde\001\002\000\004\006\124\001" +
    "\002\000\022\003\uffe4\007\uffe4\025\uffe4\030\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\001\002\000\020\003\uffea\007" +
    "\uffea\025\uffea\030\uffea\032\uffea\033\uffea\036\uffea\001\002" +
    "\000\020\003\040\007\126\025\033\030\036\032\032\033" +
    "\034\036\031\001\002\000\022\003\uffdd\007\uffdd\025\uffdd" +
    "\030\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\001\002\000" +
    "\004\024\130\001\002\000\004\012\131\001\002\000\004" +
    "\013\133\001\002\000\004\005\135\001\002\000\004\025" +
    "\134\001\002\000\004\005\uffdf\001\002\000\004\015\136" +
    "\001\002\000\022\003\uffe6\007\uffe6\025\uffe6\030\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\036\uffe6\001\002\000\016\004\051" +
    "\021\044\022\043\023\045\025\046\040\047\001\002\000" +
    "\020\004\uffc7\005\uffc9\021\uffc7\022\uffc7\023\uffc7\025\uffc7" +
    "\040\uffc7\001\002\000\016\004\051\021\044\022\043\023" +
    "\045\025\046\040\047\001\002\000\034\015\143\037\065" +
    "\042\067\043\057\044\062\045\063\046\053\047\054\050" +
    "\056\051\061\052\055\053\060\054\066\001\002\000\022" +
    "\003\uffe3\007\uffe3\025\uffe3\030\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\036\uffe3\001\002\000\004\005\145\001\002\000\004" +
    "\015\146\001\002\000\022\003\uffe1\007\uffe1\025\uffe1\030" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\001\002\000\034" +
    "\011\150\037\065\042\067\043\057\044\062\045\063\046" +
    "\053\047\054\050\056\051\061\052\055\053\060\054\066" +
    "\001\002\000\004\041\151\001\002\000\016\004\051\021" +
    "\044\022\043\023\045\025\046\040\047\001\002\000\034" +
    "\015\153\037\065\042\067\043\057\044\062\045\063\046" +
    "\053\047\054\050\056\051\061\052\055\053\060\054\066" +
    "\001\002\000\022\003\uffe2\007\uffe2\025\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\036\uffe2\001\002\000\004\024\155" +
    "\001\002\000\006\005\156\012\157\001\002\000\004\015" +
    "\163\001\002\000\004\025\160\001\002\000\004\005\161" +
    "\001\002\000\004\015\162\001\002\000\022\003\uffe7\007" +
    "\uffe7\025\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7" +
    "\001\002\000\022\003\uffe8\007\uffe8\025\uffe8\030\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\001\002\000\016\004\051" +
    "\021\044\022\043\023\045\025\046\040\047\001\002\000" +
    "\034\005\166\037\065\042\067\043\057\044\062\045\063" +
    "\046\053\047\054\050\056\051\061\052\055\053\060\054" +
    "\066\001\002\000\004\006\167\001\002\000\020\003\uffea" +
    "\007\uffea\025\uffea\030\uffea\032\uffea\033\uffea\036\uffea\001" +
    "\002\000\020\003\040\007\171\025\033\030\036\032\032" +
    "\033\034\036\031\001\002\000\022\003\uffe5\007\uffe5\025" +
    "\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5\001\002" +
    "\000\006\010\173\015\uffec\001\002\000\004\021\176\001" +
    "\002\000\004\015\175\001\002\000\030\003\uffed\016\uffed" +
    "\017\uffed\020\uffed\025\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\001\002\000\004\011\177\001\002" +
    "\000\004\015\uffeb\001\002\000\004\004\201\001\002\000" +
    "\014\005\ufff6\016\ufff4\017\ufff4\020\ufff4\035\ufff4\001\002" +
    "\000\004\005\210\001\002\000\012\016\015\017\017\020" +
    "\014\035\016\001\002\000\006\005\ufff5\012\207\001\002" +
    "\000\004\025\206\001\002\000\006\005\ufff2\012\ufff2\001" +
    "\002\000\012\016\ufff3\017\ufff3\020\ufff3\035\ufff3\001\002" +
    "\000\004\006\211\001\002\000\030\003\uffef\016\uffef\017" +
    "\uffef\020\uffef\025\uffef\030\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\001\002\000\004\007\213\001\002\000" +
    "\014\016\ufffc\017\ufffc\020\ufffc\031\ufffc\035\ufffc\001\002" +
    "\000\004\014\215\001\002\000\004\026\216\001\002\000" +
    "\014\016\uffff\017\uffff\020\uffff\031\uffff\035\uffff\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\002\003\026\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\006\001\001\000\010" +
    "\004\007\005\010\006\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\023" +
    "\014\022\001\001\000\010\006\025\015\027\017\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\036\020\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\104\001\001\000\002" +
    "\001\001\000\004\023\051\001\001\000\002\001\001\000" +
    "\004\023\102\001\001\000\004\023\101\001\001\000\004" +
    "\023\100\001\001\000\004\023\077\001\001\000\004\023" +
    "\076\001\001\000\004\023\075\001\001\000\004\023\074" +
    "\001\001\000\004\023\073\001\001\000\004\023\072\001" +
    "\001\000\002\001\001\000\004\023\071\001\001\000\004" +
    "\023\070\001\001\000\004\023\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\106\025\107\001\001\000\002\001\001" +
    "\000\004\023\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\117\001\001\000" +
    "\004\020\034\001\001\000\004\022\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\124\001\001\000" +
    "\004\020\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\146\001\001\000\006\024" +
    "\143\025\107\001\001\000\004\023\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\167\001" +
    "\001\000\004\020\034\001\001\000\002\001\001\000\004" +
    "\016\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\201\010\202\001\001\000\002\001" +
    "\001\000\006\006\204\011\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\211\014\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
  public static int erro = 0;
  
  public void report_error(String message, Object info) {
  	erro++;  
	StringBuffer m = new StringBuffer("\nErro sintatico numero " + erro);
	if (info instanceof java_cup.runtime.Symbol)	
	{
		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		if(s.left >=0)
		{
		  m.append(" na linha " + (s.left+1));
		  /* if(s.right >=0)
		    m.append(" coluna " + (s.right+1));*/
		}
	}
	System.out.println(m);
  }
 
  public void report_fatal_error (String mensagem, Object info) {
    report_fatal_error_message(mensagem, info);
    System.exit(1);
  }

  public void report_fatal_error_message (String mensagem, Object info) {
    erro++;  
	StringBuffer m = new StringBuffer("Erro sintatico numero " + erro + ".Impossivel recuperar do erro, finalizando parser!");
	System.out.println(m);
    System.exit(1);
  }

	public void check(){
		if(erro > 0){
			System.exit(1);
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressaoListaResto ::= expressaoListaResto expressao VIRG 
            {
              ExpressaoLista RESULT =null;
		int explstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int explstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressaoLista explst = (ExpressaoLista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = explst.append(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoListaResto",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressaoListaResto ::= 
            {
              ExpressaoLista RESULT =null;
		 RESULT = new ExpressaoLista(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoListaResto",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressaoLista ::= expressaoListaResto expressao 
            {
              ExpressaoLista RESULT =null;
		int explstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressaoLista explst = (ExpressaoLista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = explst.append(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoLista",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressaoLista ::= 
            {
              ExpressaoLista RESULT =null;
		 RESULT = new ExpressaoLista(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoLista",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao ::= NEG expressao 
            {
              Expressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TermoNegacao(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= LFLOAT 
            {
              Expressao RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpFloat(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= LINT 
            {
              Expressao RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer it = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpInt(it); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= LCHAR 
            {
              Expressao RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpChar(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= LPAREN expressao RPAREN 
            {
              Expressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TermoParenteses(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= IDF 
            {
              Expressao RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpId(new Idf(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= IDF LPAREN expressaoLista RPAREN 
            {
              Expressao RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int explstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressaoLista explst = (ExpressaoLista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TermoFuncao(new Idf(i),explst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao ::= expressao OU expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ou(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao ::= expressao E expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new E(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= expressao DIF expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diferente(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= expressao MENOR expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menor(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao ::= expressao MAIOR expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Maior(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao ::= expressao MENEQ expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MenorIgual(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao ::= expressao MAIEQ expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MaiorIgual(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao ::= expressao MULT expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacao(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressao ::= expressao DIV expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divisao(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressao ::= expressao SUB expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Subtracao(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressao ::= expressao SOMA expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Adicao(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressao ::= expressao EQ expressao 
            {
              Expressao RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Igualdade(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elsis ::= ELSE LCHAVE comandos RCHAVE 
            {
              Elsis RESULT =null;
		int cmdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comandos cmds = (Comandos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Elsis(cmds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elsis ::= 
            {
              Elsis RESULT =null;
		RESULT = new Elsis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inList ::= ECOM IDF 
            {
              InList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InList(new Idf(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comando ::= error PTVIRG 
            {
              Comando RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comando ::= IDF LPAREN expressaoLista RPAREN PTVIRG 
            {
              Comando RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int explstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int explstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressaoLista explst = (ExpressaoLista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChamadaFuncao(new Idf(i),explst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comando ::= IDF LCOLCH expressao RCOLCH ATRIB expressao PTVIRG 
            {
              Comando RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expressao exp1 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressao exp2 = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VetorAtrib(new Idf(i),exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= IDF ATRIB expressao PTVIRG 
            {
              Comando RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atribuicao(new Idf(i),exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= IF LPAREN expressao RPAREN LCHAVE comandos RCHAVE elsis 
            {
              Comando RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cmdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cmdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Comandos cmds = (Comandos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elsis elss = (Elsis)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoIf(exp,cmds,elss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= WHILE LPAREN expressao RPAREN LCHAVE comandos RCHAVE 
            {
              Comando RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cmdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comandos cmds = (Comandos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ComandoWhile(exp,cmds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= SCANF LPAREN STRING VIRG inList RPAREN PTVIRG 
            {
              Comando RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inlstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inlstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InList inlst = (InList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Scan(str,inlst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= PRINTF LPAREN STRING VIRG IDF RPAREN PTVIRG 
            {
              Comando RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PrintId(str,new Idf(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= PRINTF LPAREN STRING RPAREN PTVIRG 
            {
              Comando RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(str); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comandos ::= comandos comando 
            {
              Comandos RESULT =null;
		int cmdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comandos cmds = (Comandos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comando cmd = (Comando)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cmds.append(cmd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comandos ::= 
            {
              Comandos RESULT =null;
		 RESULT = new Comandos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vetor ::= LCOLCH LINT RCOLCH 
            {
              Vetor RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer vt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Vetor(vt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vetor ::= 
            {
              Vetor RESULT =null;
		 RESULT = new Vetor(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declara ::= tipo IDF vetor PTVIRG 
            {
              Declara RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tpo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vetor vt = (Vetor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declara(tpo,vt,new Idf(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaraLista ::= declaraLista declara 
            {
              DeclaraLista RESULT =null;
		int dclstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dclstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaraLista dclst = (DeclaraLista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declara dcl = (Declara)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dclst.append(dcl);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraLista",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaraLista ::= 
            {
              DeclaraLista RESULT =null;
		 RESULT = new DeclaraLista(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraLista",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ret ::= RETURN 
            {
              Ret RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ret(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programa ::= declaraLista comandos ret expressao PTVIRG 
            {
              Programa RESULT =null;
		int declstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclaraLista declst = (DeclaraLista)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cmdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cmdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Comandos cmds = (Comandos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ret r = (Ret)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Programa(declst,cmds,r,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // entrada ::= tipo IDF 
            {
              Entrada RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tpo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Entrada(tpo,new Idf(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrada",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // restoEntrada ::= restoEntrada entrada VIRG 
            {
              EntradaFuncao RESULT =null;
		int retrdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retrdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EntradaFuncao retrd = (EntradaFuncao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Entrada e = (Entrada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = retrd.append(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restoEntrada",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // restoEntrada ::= 
            {
              EntradaFuncao RESULT =null;
		 RESULT = new EntradaFuncao(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restoEntrada",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // entradaFuncao ::= restoEntrada entrada 
            {
              EntradaFuncao RESULT =null;
		int retrdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retrdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EntradaFuncao retrd = (EntradaFuncao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Entrada e = (Entrada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = retrd.append(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaFuncao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // entradaFuncao ::= 
            {
              EntradaFuncao RESULT =null;
		 RESULT = new EntradaFuncao(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaFuncao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= VOID 
            {
              Tipo RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidTipo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new FloatTipo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new IntTipo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharTipo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcaoPrincipal ::= MAIN LPAREN RPAREN LCHAVE programa RCHAVE 
            {
              FuncaoPrincipal RESULT =null;
		int prgmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prgmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programa prgm = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncaoPrincipal(prgm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcaoPrincipal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcao ::= tipo IDF LPAREN entradaFuncao RPAREN LCHAVE programa RCHAVE 
            {
              Funcao RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo tpo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int etrdfncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int etrdfncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EntradaFuncao etrdfnc = (EntradaFuncao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int prgmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prgmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programa prgm = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Funcao(tpo,new Idf(i),etrdfnc,prgm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcao",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcaoBloco ::= funcaoBloco funcao 
            {
              FuncaoBloco RESULT =null;
		int fncbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fncbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncaoBloco fncb = (FuncaoBloco)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcao fnc = (Funcao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fncb.append(fnc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcaoBloco",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcaoBloco ::= 
            {
              FuncaoBloco RESULT =null;
		 RESULT = new FuncaoBloco(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcaoBloco",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prologo ::= SHARP INCLUDE SHARP INCLUDE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prologo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // arquivo ::= prologo funcaoBloco funcaoPrincipal 
            {
              Arquivo RESULT =null;
		int fncbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fncbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncaoBloco fncb = (FuncaoBloco)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fncpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fncpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncaoPrincipal fncp = (FuncaoPrincipal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Arquivo(fncb,fncp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arquivo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= arquivo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arquivo start_val = (Arquivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

